Hello and again, welcome to the Training Demo module!



This time we'll take a quick glimpse at unit testing.

If you're familiar with unit testing you won't find anything very extraordinary. What's notable here is that you'll notice the many setup steps
needed to be able to run tests. Since Orchard has many services that in turn use many services and our demo module uses some of these many Orchard
services sometimes there are loads of types to mock or stub.

Other gotchas:
- System.Data.SqlServerCe should be referenced if you want to test DB-using classes and its properties should be set to Copy Local = true

If you don't really know what unit testing is about please study the topic first.

There is no scaffolding command to create unit test projects (yet: https://www.google.com/search?q=Work+Item+Codeplex) so you have to create them by hand.
This is not trivial as test projects need many references; this project has almost the absolute minimum amount of project references that are needed 
to be able to correctly run unit tests. Some stubs and base classes are already implemented in the built-in test projects so those are referenced as
well.

To actually run unit tests you'll need a unit test runner. We advise you to check out the TestDriven.Net VS add-in (http://www.testdriven.net/)
that makes executing a test suite a matter of right click-click.

You may have noticed that the structure of the unit test project is conveniently the same as the module's, e.g. tests for services are in the 
Services folder/namespace.

We use the built-in NUnit framework for testing, because it's not only already bundled but also all of Orchard's tests use it. You could of course
use any other unit testing framework if you'd like to but you're on your own :-).


To start, head over to Services/PersonManagerTests!